[{"/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/index.js":"1","/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/App.js":"2","/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/reportWebVitals.js":"3","/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/components/Messenger.js":"4","/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/api/backend_api.js":"5"},{"size":500,"mtime":1608840498848,"results":"6","hashOfConfig":"7"},{"size":189,"mtime":1608846401808,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608840498852,"results":"9","hashOfConfig":"7"},{"size":3909,"mtime":1608908797491,"results":"10","hashOfConfig":"7"},{"size":98,"mtime":1608895538080,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1dqalfy",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/index.js",[],["25","26"],"/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/App.js",[],"/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/reportWebVitals.js",[],"/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/components/Messenger.js",["27"],"import React, {useState, useEffect} from 'react';\nimport backend_api from '../api/backend_api';\n\n//prompting for user;\nconst loggedInUserId = parseInt(prompt('Select a user b/w 1,3,5,6,7 Cuz only they are Online now'));\n\nconst Messenger = () => {\n\n\n\n    // const loggedInUserId = 1;   //by default logged in user is Ronaldo\n\n    const [onlineUsers, setOnlineUsers] = useState([]) ;\n    const [textReceiver, setTextReceiver] = useState(null);\n    const [messages, setMessages] = useState([]);\n\n    const getOnlineUsers = async() =>{\n        const {data} = await backend_api.get('/available_users');\n        const onlineUsers = []\n        //removing online user\n        data.rows.forEach((u)=>{\n            if(u.user_id !== loggedInUserId){\n                onlineUsers.push(u);\n            }\n        })\n        setOnlineUsers(onlineUsers);\n    }\n\n    useEffect(()=>{\n        getOnlineUsers();\n    },[]);\n\n    useEffect(()=>{\n        getMessages();\n    },[textReceiver]);\n\n    const idGenerator = () =>{\n        return parseInt(Math.random()*1000+Math.random()*10000+Math.random()*100000);\n    }\n\n\n    const createDropdown =()=>{\n\n        const dropdownArray = onlineUsers.map(u =>{\n            return(\n                <option key={u.user_id} value={u.user_id}>{u.name}</option>\n            );\n        })\n        return dropdownArray;\n    }\n\n    const getMessages = async() =>{\n        //post with textReceiver\n        //check if not null\n        const {data} = await backend_api.post('/messagenger_view',{textSender:loggedInUserId,textReceiver:textReceiver});\n        const {messages} = data;\n        setMessages(messages);        \n    }\n\n    const messageUi = () =>{\n        const messageList = messages.map((m)=>{\n            //for logged in user\n\n            return (\n                <li key={m.message_id} className={m.sender_user_id===loggedInUserId ? 'user_message' : 'other_message'}>\n\n                    <div className=\"message-box\">\n                        <div className=\"message-body header\">\n                            {m.message_content}\n                        </div>\n                        <div className=\"sent-time meta\">\n                            <label>Time</label> {m.sent_time}\n                        </div>\n                    </div>\n\n                </li>\n            );\n\n        })\n        return messageList;\n    }\n    \n    const onFormSubmit = async(e)=>{\n        e.preventDefault();\n        const messageContent = String(document.querySelector('#message').value);\n        await backend_api.post('/messagenger_create',{\n            message_id : idGenerator(),\n            sender_id : loggedInUserId,\n            message_body:messageContent,\n            message_receive_id:idGenerator(),\n            receiver_id:parseInt(textReceiver),\n            is_read:true,\n            sent_time:new Date().toISOString(),\n            receive_time:new Date().toISOString()\n\n        })\n        getMessages();\n        document.querySelector('#message').value='';\n    }\n\n        //checking for new message after 20 sec:\n        window.setInterval(function(){\n            /// call your function here\n            getMessages();\n        }, 20000);\n    \n\n \n    return (\n        <div className=\"messenger\">\n            <select onChange={(e)=>{setTextReceiver(e.target.value)}} className=\"ui search dropdown\">\n                <option value=\"\">Online User-list</option>\n                    {createDropdown()}\n            </select>\n            <h2 style={{color:'red'}}> ^^^ Change it to message someone</h2>\n\n            <ul>\n                {messageUi()}\n            </ul>\n\n            <form onSubmit={onFormSubmit} className=\"ui form\">\n                <div className=\"field\" style={{margin:'0 20px'}}>\n                    <label>Write message:</label>\n                    <input id='message' type=\"text\" />\n                </div>\n            </form>\n\n        </div>\n    );\n}\n \nexport default Messenger;","/home/sd17/Desktop/interim/huddll-message/huddll-message-frontend/src/api/backend_api.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":35,"column":7,"nodeType":"36","endLine":35,"endColumn":21,"suggestions":"37"},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.","ArrayExpression",["42"],["40"],["41"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [getMessages, textReceiver]",{"range":"45","text":"46"},[952,966],"[getMessages, textReceiver]"]